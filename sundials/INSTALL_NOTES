                     SUNDIALS Installation Instructions
                        Release 2.5.0, March 2012  


These are generic installation instructions. For complete installation instructions, 
consult the user guide for any of the SUNDIALS solvers.

Contents:

[A] Preliminaries
    A.1. Libraries and exported headers
[B] CMake-based installation
    B.1. Prerequisites
    B.2. Configuration and build

================
A. Preliminaries
================

The SUNDIALS suite (or an individual solver) is distributed as a compressed archive
(.tar.gz). The name of the distribution archive is of the form 'solver'-x.y.z.tar.gz,
where 'solver' is one of: 'sundials', 'arkode', 'cvode', 'cvodes', 'ida', 'idas', or 
'kinsol', and x.y.z represents the version number (of the SUNDIALS suite or of the 
individual solver).

To begin the installation, first uncompress and expand the sources, by issuing

   % tar xzf solver-x.y.z.tar.gz

This will extract source files under a directory 'solver'-x.y.z.

In the remainder of this chapter, we make the following distinctions:

'srcdir' 

  is the directory 'solver'-x.y.z created above; i.e., the 
  directory containing the SUNDIALS sources.

'builddir'

  is the directory under which SUNDIALS is built; i.e., the directory from within 
  which the configure or ccmake command is issued. 

  NOTE: When using the autoconf configure script, this directory can be the same 
  as 'srcdir'. However, when using ccmake, insource builds are prohibited.

'instdir'

  is the directory under which the SUNDIALS exported header files and libraries will 
  be installed. Typically, header files are exported under a directory 'instdir'/include 
  while libraries are installed under 'instdir'/lib, with 'instdir' specified with the 
  --prefix flag to configure. See below for more details on the installation directories, 
  including the special cases of the SUNDIALS examples.

  NOTE: The installation directory 'instdir' should NOT be the same as the source 
        directory 'srcdir'.


SUNDIALS provides two build alternatives:
1) autotools-based build system. This options, suitable for *nix systems 
   (Linux, Unix, Mac OS X, cygwin, mingw, etc.) is based on running a 'configure'
   shell script which generates all required makefiles. 
2) CMake-based build system. This option is available on a variety of platforms 
   (*nix, Windows, Mac OS, etc) but relies on additional software (freely
   available CMake).


-----------------------------------
A.1. Libraries and exported headers
-----------------------------------

By default, 'make install' will install the SUNDIALS libraries under 'libdir' and the public 
header files under 'includedir'. The default values for these directories are 'instdir'/lib 
and 'instdir'/include, respectively, but can be changed at the configuration stage.

The SUNDIALS libraries and header files are summarized below (names are relative to 'libdir' 
for libraries and to 'includedir' for header files)

SHARED module
  header files: sundials/sundials_types.h      sundials/sundials_math.h
                sundials/sundials_config.h     sundias/sundials_nvector.h
                sundials/sundials_smalldense.h sundials/sundials_dense.h
                sundials/sundials_iterative.h  sundials/sundials_band.h
                sundials/sundials_spbcgs.h     sundials/sundials_sptfqmr.h
                sundials/sundials_spgmr.h      sundials/sundials_lapack.h
                sundials/sundials_fnvector.h


NVECTOR_SERIAL module
  libraries:    libsundials_nvecserial.{a,so} libsundials_fnvecserial.a
  header files: nvector/nvector_serial.h


NVECTOR_PARALLEL module
  libraries:    libsundials_nvecparallel.{a,so} libsundials_fnvecparallel.a
  header files: nvector/nvector_parallel.h


ARKODE module
  libraries:    libsundials_arkode.{a,so} libsundials_farkode.a
  header files: arkode/arkode.h          arkode/arkode_lapack.h
                arkode/arkode_band.h     arkode/arkode_pcg.h
                arkode/arkode_bandpre.h  arkode/arkode_spbcgs.h
                arkode/arkode_bbdpre.h   arkode/arkode_spfgmr.h
                arkode/arkode_dense.h    arkode/arkode_spgmr.h
                arkode/arkode_direct.h   arkode/arkode_spils.h
                arkode/arkode_impl.h     arkode/arkode_sptfqmr.h


CVODE module
  libraries:    libsundials_cvode.{a,so} libsundials_fcvode.a
  header files: cvode/cvode.h          cvode/cvode_direct.h
                cvode/cvode_dense.h    cvode/cvode_band.h
                cvode/cvode_diag.h     cvode/cvode_spils.h
                cvode/cvode_bandpre.h  cvode/cvode_bbdpre.h
                cvode/cvode_spgmr.h    cvode/cvode_spbcgs.h
                cvode/cvode_sptfqmr.h  cvode/cvode_impl.h
                cvode/cvode_lapack.h


CVODES module
  library:      libsundials_cvodes.{a,so}
  header files: cvodes/cvodes.h           cvodes/cvodes_direct.h
                cvodes/cvodes_dense.h     cvodes/cvodes_band.h
                cvodes/cvodes_diag.h      cvodes/cvodes_spils.h
                cvodes/cvodes_bandpre.h   cvodes/cvodes_bbdpre.h
                cvodes/cvodes_spgmr.h     cvodes/cvodes_spbcgs.h
                cvodes/cvodes_sptfqmr.h   cvodes/cvodes_impl.h
                cvodes/cvodes_lapack.h


IDA module
  library:      libsundials_ida.{a,so}
  header files: ida/ida.h          ida/ida_direct.h
                ida/ida_dense.h    ida/ida_band.h
                ida/ida_spils.h    ida/ida_spgmr.h
                ida/ida_spbcgs.h   ida/ida_sptfqmr.h
                ida/ida_bbdpre.h   ida/ida_impl.h
                ida/dia_lapack.h


IDAS module
  library:      libsundials_idas.{a,so}
  header files: idas/idas.h          idas/idas_direct.h
                idas/idas_dense.h    idas/idas_band.h
                idas/idas_spils.h    idas/idas_spgmr.h
                idas/idas_spbcgs.h   idas/idas_sptfqmr.h
                idas/idas_bbdpre.h   idas/idas_impl.h
                idas/dia_lapack.h


KINSOL module
  libraries:    libsundials_kinsol.{a,so} libsundials_fkinsol.a
  header files: kinsol/kinsol.h
                kinsol/kinsol_dense.h   kinsol/kinsol_band.h
                kinsol/kinsol_spils.h   kinsol/kinsol_spgmr.h
                kinsol/kinsol_spbcgs.h  kinsol/kinsol_sptfqmr.h
                kinsol/kinsol_bbdpre.h  kinsol/kinsol_impl.h



===========================
B. CMake-based installation
===========================

Using CMake as a build system for the SUNDIALS libraries has the advantage 
that GUI based build configuration is possible. Also build files for Windows 
development environments can be easily generated. On the Windows platform 
compilers such as the Borland C++ compiler or Visual C++ compiler are natively 
supported. 

The installation options are very similar to the options mentioned above. 

------------------
B.1. Prerequisites
------------------

You may need to get CMake if it isn't available on your system
already.  In order to use the CMake build system, version 2.8.1 or
greater is required. Python is optional for running the test suite.
Note that Python is NOT needed for compiling libraries or running
examples, it is only used by our automated regression test suite (make
test).  We have have used Python 2.7.x versions.  We have not used the
Python 3.x.

If you are running a Linux distribution, chances are CMake and Python
are both available using the standard package managers for the
distribution.

CMake is available from download it from:

    http://www.cmake.org

Python is available from:

    http://www.python.org/


----------------------------
B.2. Configuration and build under Unix.
----------------------------

We assume here a Unix system. For other systems, the required steps
are very similar and are explained in more detail in the SUNDIALS user
guides.  The installation steps are as follows:

- uncompress solver-x.y.z.tar.gz to obtain 'srcdir'
- create the directories 'builddir' and 'instdir'
- change directory to 'builddir'
- run ccmake with 'srcdir' as an argument

You should now see the ccmake curses interface. Press 'c' to configure
your build with the default options. (If you don't have curses on your
system and cannot use ccmake, you can configure cmake with command
line options very similar to ./configure of the autotools. You can
read about this on the cmake webpage.)

In the dialog you can adjust the build options. For details see the
options above in the autotools section. To adjust advanced options
press 't' to show all the options and settings CMake offers.

After adjusting some options, for instance enabling the examples by
turning ENABLE_EXAMPLES to ON, you need to press 'c' again. Depending
on the options, you will see new options at the top of the list,
marked with a star. After adjusting the new options, press 'c'
again. Once all options have been set, you can press 'g' to generate
the make files.

Run make to build and install using the Makefile that CMake generates.

Example sequence of commands for building (replace tarfile name and
directories for the version you downloaded):

    tar zxf sundials-2.5.0.tar.gz
    mkdir build			# build directory
    mkdir ~/sundials_install    # installation directory
    cd build
    ccmake ../sundials-2.5.0
    # configure options as needed.
    make
    make install

Optionally you may run the test suite to verify the installation:

    make test    

Problems have been found when trying to reset the C/C++ compiler path
from within the CMake ccmake tool.  Older versions of ccmake will go
into infinte loops.  One work-around for this is to set the compiler
before launching ccmake.  For example:

CC=gcc CXX=g++ ccmake <path to sundials source dir>

----------------------------
B.3. Configuration and build under Windows.
----------------------------

We are principally run with Unix/Linux; we try to maintain
compatibility with Windows as much as resources allow.

We have tested under Windows using Visual Studio 2012 with no Fortran
enabled.  Note that CMake refers to Visual Studio 2012 by the version
number 11.  We chose "Visual Studio 11" for the generator for the
project.

We encountered problems linking example applications if both static
and shared library support are selected.  If problems are encountered
choose one or the other.

For Windows we have tested using the WinPython 2.7.x distribution:

http://code.google.com/p/winpython/

However we are using basic Python so any 2.7.x based distribution
should work.  Again, Python is only needed for running the test suite,
e.g. building the "RUN_TESTS" target from the solution explorer.

Note we had to manually set the path to the python.exe file in the
Advanced options in CMake for the PYTHON_EXECUTABLE variable; CMake
did not automatically find the Python installation.

