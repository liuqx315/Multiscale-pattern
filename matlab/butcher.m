function B = butcher(method_name)
% Usage: B = butcher(method_name)
% 
% Returns the butcher table associated with the method given by the input
% argument 'method_name'.  Allowed methods include:
%    ARK3(2)4L[2]SA-ESDIRK
%    ARK4(3)6L[2]SA-ESDIRK
% Daniel R. Reynolds
% Department of Mathematics
% Southern Methodist University
% August 2011
% All Rights Reserved

% set the butcher table
if (method_name == 'ARK3(2)4L[2]SA-ERK')

   c = [0; 1767732205903/2027836641118; 3/5; 1];
   b = [1471266399579/7840856788654, -4482444167858/7529755066697, 
      11266239266428/11593286722821, 1767732205903/4055673282236];
   b2 = [2756255671327/12835298489170, -10771552573575/22201958757719,
      9247589265047/10645013368117, 2193209047091/5459859503100];
   A = [0, 0, 0, 0;
      1767732205903/2027836641118, 0, 0, 0;
      5535828885825/10492691773637, 788022342437/10882634858940, 0, 0;
      6485989280629/16251701735622, -4246266847089/9704473918619, ...
	  10755448449292/10357097424841, 0];
   B = [c, A; 0, b; 0, b2];

elseif (method_name == 'ARK3(2)4L[2]SA-ESDIRK')

   c = [0; 1767732205903/2027836641118; 3/5; 1];
   b = [1471266399579/7840856788654, -4482444167858/7529755066697, 
      11266239266428/11593286722821, 1767732205903/4055673282236];
   b2 = [2756255671327/12835298489170, -10771552573575/22201958757719, 
      9247589265047/10645013368117, 2193209047091/5459859503100];
   gamma = 1767732205903/4055673282236;
   A = [0, 0, 0, 0;
      1767732205903/4055673282236, gamma, 0, 0;
      2746238789719/10658868560708, -640167445237/6845629431997, gamma, 0;
      1471266399579/7840856788654, -4482444167858/7529755066697, ...
	  11266239266428/11593286722821, gamma];

   B = [c, A; 0, b; 0, b2];

elseif (method_name == 'ARK4(3)6L[2]SA-ERK')

   c = [0; 1/2; 83/250; 31/50; 17/20; 1];
   b = [82889/524892, 0, 15625/83664, 69875/102672, -2260/8211, 1/4];
   b2 = [4586570599/29645900160, 0, 178811875/945068544, ...
      814220225/1159782912, -3700637/11593932, 61727/225920];
   A = [0, 0, 0, 0, 0, 0;
      1/2, 0, 0, 0, 0, 0;
      13861/62500, 6889/62500, 0 0 0 0;
      -116923316275/2393684061468, -2731218467317/15368042101831, ...
	  9408046702089/11113171139209, 0, 0, 0;
      -451086348788/2902428689909, -2682348792572/7519795681897, ...
	  12662868775082/11960479115383, 3355817975965/11060851509271, 0, 0;
      647845179188/3216320057751, 73281519250/8382639484533, ...
	  552539513391/3454668386233, 3354512671639/8306763924573, ...
	  4040/17871, 0];
   
   B = [c, A; 0, b; 0, b2];
   
elseif (method_name == 'ARK4(3)6L[2]SA-ESDIRK')

   c = [0; 1/2; 83/250; 31/50; 17/20; 1];
   b = [82889/524892, 0, 15625/83664, 69875/102672, -2260/8211, 1/4];
   b2 = [4586570599/29645900160, 0, 178811875/945068544, ...
      814220225/1159782912, -3700637/11593932, 61727/225920];
   A = [0, 0, 0, 0, 0, 0;
      1/4, 1/4, 0, 0, 0, 0;
      8611/62500, -1743/31250, 1/4, 0, 0, 0;
      5012029/34652500, -654441/2922500, 174375/388108, 1/4, 0, 0;
      15267082809/155376265600, -71443401/120774400, 730878875/902184768, ...
         2285395/8070912, 1/4, 0;
      82889/524892, 0, 15625/83664, 69875/102672, -2260/8211, 1/4];
   
   B = [c, A; 0, b; 0, b2];
   
elseif (method_name == 'Ascher(2,3,3)-ERK')

   gamma = (3 + sqrt(3))/6;
   c = [0; gamma; 1-gamma];
   b = [0, 1/2, 1/2];
   A = [0, 0, 0;
      gamma, 0, 0;
      gamma-1, 2*(1-gamma), 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(2,3,3)-SDIRK')

   gamma = (3 + sqrt(3))/6;
   c = [gamma; 1-gamma];
   b = [1/2, 1/2];
   A = [gamma, 0;
        1-2*gamma, gamma];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(2,3,2)-ERK')

   gamma = (2-sqrt(2))/2;
   delta = -2*sqrt(2)/3;
   c = [0; gamma; 1];
   b = [0, 1-gamma, gamma];
   A = [0, 0, 0;
        gamma, 0, 0;
        delta, 1-delta, 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(2,3,2)-SDIRK')

   gamma = (2-sqrt(2))/2;
   c = [gamma; 1];
   b = [1-gamma, gamma];
   A = [gamma, 0;
        1-gamma, gamma];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(2,2,2)-ERK')

   gamma = (2-sqrt(2))/2;
   delta = 1-1/(2*gamma);
   c = [0; gamma; 1];
   b = [delta, 1-delta, 0];
   A = [0, 0, 0;
        gamma, 0, 0;
        delta, 1-delta, 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(2,2,2)-SDIRK')

   gamma = (2-sqrt(2))/2;
   c = [gamma; 1];
   b = [1-gamma, gamma];
   A = [gamma, 0;
        1-gamma, gamma];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(3,4,3)-ERK')

   gamma = 0.4358665215;
   c = [0; gamma; (1+gamma)/2; 1];
   b = [0, -3/2*gamma^2+4*gamma-1/4, 3/2*gamma^2-5*gamma+5/4, gamma];
   A = [0, 0, 0, 0;
        gamma, 0, 0, 0;
	0.3212788860, 0.3966543747, 0, 0;
        -0.105858296, 0.5529291479, 0.5529291479, 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(3,4,3)-SDIRK')

   gamma = 0.4358665215;
   c = [gamma; (1+gamma)/2; 1];
   b = [-3/2*gamma^2+4*gamma-1/4, 3/2*gamma^2-5*gamma+5/4, gamma];
   A = [gamma, 0, 0;
        (1-gamma)/2, gamma, 0;
        -3/2*gamma^2 + 4*gamma - 1/4, 3/2*gamma^2-5*gamma+5/4, gamma];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(4,4,3)-ERK')

   c = [0; 1/2; 2/3; 1/2; 1];
   b = [1/4, 7/4, 3/4, -7/4, 0];
   A = [0, 0, 0, 0, 0;
        1/2, 0, 0, 0, 0;
	11/18, 1/18, 0, 0, 0;
	5/6, -5/6, 1/2, 0, 0;
	1/4, 7/4, 3/4, -7/4, 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Ascher(4,4,3)-SDIRK')

   c = [1/2; 2/3; 1/2; 1];
   b = [3/2, -3/2, 1/2, 1/2];
   A = [1/2, 0, 0, 0;
        1/6, 1/2, 0, 0;
	-1/2, 1/2, 1/2, 0;
	3/2, -3/2, 1/2, 1/2];
     
   B = [c, A; 0, b];
   
elseif (method_name == 'Cooper4-ERK')

   c = [0; 2/3; 2/3; 1];
   b = [1/4, 1/4, 1/2, 0];
   A = [0, 0, 0, 0;
        2/3, 0, 0, 0;
	1/6, 1/2, 0, 0;
	1/4, 1/4, 1/2, 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Cooper4-ESDIRK')

   c = [0; 2/3; 2/3; 1];
   b = [1/4, 1/4, 1/2, 0];
   A = [0, 0, 0, 0;
        (1-sqrt(3))/6, (3+sqrt(3))/6, 0, 0;
	(5+sqrt(3))/12, -(1+sqrt(3))/4, (3+sqrt(3))/6, 0;
	1/4, 1/4, 1/2, 0];
     
   B = [c, A; 0, b];
   
elseif (method_name == 'Cooper6-ERK')

   c = [0; 1/2; 1/2; 1/2; 1; 1];
   b = [1/6, 0, 0, 2/3, 1/6, 0];
   A = [0, 0, 0, 0, 0, 0;
        1/2, 0, 0, 0, 0, 0;
	1/4, 1/4, 0, 0, 0, 0;
	1/4, 1/4, 0, 0, 0, 0;
	0, -1, 0, 2, 0, 0;
	1/6, 0, 0, 2/3, 1/6, 0];
   
   B = [c, A; 0, b];
   
elseif (method_name == 'Cooper6-ESDIRK')

   beta = 1.0685790213;
   c = [0; 1/2; 1/2; 1/2; 1; 1];
   b = [1/6, 0, 0, 2/3, 1/6, 0];
   A = [0, 0, 0, 0, 0, 0;
        (1-2*beta)/2, beta, 0, 0, 0, 0;
	1/4, (1-4*beta)/4, beta, 0, 0, 0;
	1/4, beta/2, (1-6*beta)/4, beta, 0, 0;
	0, -2*beta, (1-6*beta-8*beta^2)/(1-4*beta), 4*beta/(1-4*beta), 0, 0;
	1/6, 0, 0, 2/3, 1/6, 0];
      
   B = [c, A; 0, b];
   
end

% end of function
